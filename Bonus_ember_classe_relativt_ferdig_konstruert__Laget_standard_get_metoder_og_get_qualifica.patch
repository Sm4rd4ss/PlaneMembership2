Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1580813319725)
+++ .idea/misc.xml	(date 1580813319725)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1580813600588)
+++ .idea/modules.xml	(date 1580813600588)
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/Plane Membership.iml" filepath="$PROJECT_DIR$/Plane Membership.iml" />
+      <module fileurl="file://$PROJECT_DIR$/Main/Personals.iml" filepath="$PROJECT_DIR$/Main/Personals.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/codeStyles/codeStyleConfig.xml	(date 1580813319776)
+++ .idea/codeStyles/codeStyleConfig.xml	(date 1580813319776)
@@ -0,0 +1,5 @@
+<component name="ProjectCodeStyleConfiguration">
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
+</component>
\ No newline at end of file
Index: Main/Personals.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Main/Personals.iml	(date 1580813600546)
+++ Main/Personals.iml	(date 1580813600546)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1580815343911)
+++ .idea/.gitignore	(date 1580815343911)
@@ -0,0 +1,2 @@
+# Default ignored files
+/workspace.xml
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1580815346995)
+++ .idea/vcs.xml	(date 1580815346995)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: Oblig2.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Oblig2.iml	(date 1580813247665)
+++ Oblig2.iml	(date 1580813247665)
@@ -0,0 +1,100 @@
+package oblig2;
+/**
+* The Personals-class holds personal information about a member,
+* like: surname, lastnam, e-mail address and password.
+* Since a member never changes his/her personals while changing membership level,
+* it is useful to use a separat class to hold this information.
+* The password can be changed, but it then needs to be different than the old
+* passowrd. The Password is not case sensitive.
+*/
+class Personals {
+ private final String surname;
+ private final String firstname;
+ private final String emailAddress;
+ private String password;
+ /**
+ * Creates an instance of Personals.
+ *
+ * @param firstname first name of the person
+ * @param surname surname of the person
+ * @param emailAddress email address of the person
+ * @param password the password of the person
+ */
+ public Personals(String firstname, String surname, String emailAddress, String password) {
+ if (firstname == null
+ || surname == null
+ || emailAddress == null
+ || password == null
+ || firstname.trim().equals("")
+ || surname.trim().equals("")
+ || emailAddress.trim().equals("")
+ || password.trim().equals("")) {
+ throw new IllegalArgumentException("One or more of the parameters are invalid.");
+ }
+ this.firstname = firstname.trim();
+ this.surname = surname.trim();
+ this.emailAddress = emailAddress.trim();
+ this.password = password.trim();
+ }
+ /**
+ * Returns the persons first name.
+ *
+ * @return the persons first name.
+ */
+ public String getFirstname() {
+ return firstname;
+ }
+ /**
+ * Returns the persons surname.
+ *
+ * @return the persons surname.
+ */
+ public String getSurname() {
+ return surname;
+ }
+ /**
+ * Returns the persons e-mail address.
+ *
+ * @return the persons e-mail address.
+ */
+ public String getEMailAddress() {
+ return emailAddress;
+ }
+ /**
+  * Checks if the password given by the parameter matches the password
+  * registered on the person. Returns <code>true</code> if password is
+  * correct <code>false</code> if password is wrong.
+  *
+  * @param password the password to test for
+  * @return <code>true</code> if password is correct
+  * <code>false</code> if password is wrong
+  */
+  public boolean okPassword(String password) {
+  return this.password.equalsIgnoreCase(password);
+  }
+  /**
+  * Changes the password. The new password must be different from the old.
+  * Passwords are not case sensitive.
+  * Returns <code>true</code> if the password was changed successfully,
+  * <code>false</code> if not.
+  *
+  * @param oldPassword the old password of the person
+  * @param newPassword the new password to be changed to
+  * @return <code>true</code> if the password was changed successfully,
+  * <code>false</code> if not.
+  */
+  public boolean changePassword(String oldPassword, String newPassword) {
+  // A Guard claus, hence return is allowed
+  if (oldPassword == null || newPassword == null) {
+  return false;
+  }
+  boolean changeSuccessfull;
+  if (!password.equalsIgnoreCase(oldPassword.trim())) {
+  changeSuccessfull = false;
+  } else {
+  password = newPassword.trim();
+  changeSuccessfull = true;
+  }
+  return changeSuccessfull;
+  }
+ }
\ No newline at end of file
Index: Main/src/BonusMember.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Main/src/BonusMember.java	(date 1580818001861)
+++ Main/src/BonusMember.java	(date 1580818001861)
@@ -0,0 +1,67 @@
+import com.sun.deploy.security.SelectableSecurityManager;
+
+import java.time.LocalDate;
+
+/**
+ *
+ */
+public class BonusMember {
+
+
+    private final int memberNo;
+    private final Personals personals;
+    private final LocalDate enrolledDate;
+    private int bonuspoints = 0;
+   public final double FACTOR_SILVER = 1.2;
+    public final double FACTOR_GOLD = 1.5;
+
+
+    /**
+     *
+     */
+    private BonusMember(int memberNo, Personals personals, LocalDate enrolledDate, int bonuspoints)
+    {
+        if (memberNo == 0
+        || personals == null
+        || enrolledDate == null
+        || bonuspoints < 0)
+        {throw new IllegalArgumentException("One or more of the parameters are invalid."); }
+            else
+        {
+            this.memberNo = memberNo;
+            this.personals = personals;
+            this.enrolledDate = enrolledDate;
+            this.bonuspoints = bonuspoints;
+
+        }
+
+    }
+    public LocalDate getEnrolledDate() {
+        return enrolledDate;
+    }
+
+    public Personals getPersonals() {
+        return personals;
+    }
+
+    public int getMemberNo() {
+        return memberNo;
+    }
+
+    public int getBonuspoints() {
+        return bonuspoints;
+    }
+
+    public int getQualificationPoints(){
+        if (bonuspoints < 25000){
+            return 25000-bonuspoints;
+        }
+        else if (25000 < bonuspoints && bonuspoints < 75000)
+        {
+            return 75000 -bonuspoints;
+        }
+        else {
+            return 0;
+        }
+    }
+}
Index: Plane Membership.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Plane Membership.iml	(date 1580813319687)
+++ Plane Membership.iml	(date 1580813319687)
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
